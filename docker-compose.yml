version: "3.8"

services:
  database:
    image: postgres:14-alpine
    restart: always
    ports:
      - "5432:5432"
    env_file:
      .env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
  django:
    build:
      dockerfile: django_app/Dockerfile
    volumes:
      - static_volume:/var/www/static/
      - media_volume:/var/www/media/
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --no-input &&
             gunicorn --bind 0.0.0.0:8000 config.wsgi"
    environment:
      IN_DOCKER: 1
    ports:
      - "8000:8000"
    depends_on:
      - database
      - flask
  flask:
    build:
      dockerfile: flask_cv/Dockerfile
    ports:
      - "5001:5001"
    command: >
      sh -c "gunicorn --bind 0.0.0.0:5001 -w 1 'wsgi:start_server()'"
#      sh -c "python app.py"
    environment:
      FLASK_APP: app
#    network_mode: "host"
  nginx:
    build:
      dockerfile: nginx/Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - django
      - flask
#  zookeeper:
#    image: zookeeper
#    ports:
#      - "2181:2181"
#  kafka:
#    image: confluent/kafka
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: localhost
#      KAFKA_CREATE_TOPICS: "request_topic:1:1, response_topic:1:1"
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#    depends_on:
#      - zookeeper

#    command: >
#      bash -c "sleep 5 &&
#      kafka-topics --bootstrap-server kafka:9092 --create --topic my_topic --partitions 1 --replication-factor 1"

volumes:
  static_volume:
  media_volume:

